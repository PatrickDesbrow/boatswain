apiVersion: v1
kind: List
metadata: {}
items:
# Service
- apiVersion: v1
  kind: Service
  metadata:
    name: "{{ .Values.packageId }}-{{ .Values.MySQL.Name  }}"
    labels:
      release: {{ .Release.Name }}
  spec:
    ports:
    - port: {{ .Values.MySQL.Persistence.externalPort }}
      protocol: TCP
      targetPort: {{ .Values.MySQL.Persistence.internalPort }}
    sessionAffinity: None
  {{ if .Values.MySQL.Persistence.ExternalName }}
    type: ExternalName
    externalName: {{ .Values.MySQL.Persistence.ExternalName }}
  {{ else }}
    selector:
      component: "{{ .Values.packageId }}-{{ .Values.MySQL.Name  }}"
  {{ end }}

# Database secret
- apiVersion: v1
  kind: Secret
  metadata:
    name: "{{ .Values.packageId }}-{{ .Values.MySQL.Name  }}"
  type: Opaque
  data:
    host: {{ (print (.Values.packageId) "-" .Values.MySQL.Name ) | b64enc | quote }}
    name: {{ .Values.MySQL.Secret.dbname | b64enc | quote }}
    user: {{ .Values.MySQL.Secret.user| b64enc | quote }}
    password:  {{ .Values.MySQL.Secret.password | b64enc | quote }}


{{ if empty .Values.MySQL.Persistence.ExternalName }}
# Persistent Volume
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    name: "{{ .Values.packageId }}-{{ .Values.MySQL.Persistence.Name }}"
    labels:
      app: patientservice
      chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
      component: "{{ .Values.MySQL.Component }}"
      heritage: "{{ .Release.Service }}"
      release: "{{ .Values.packageId }}"
  spec:
    accessModes:
    - {{ .Values.MySQL.Persistence.AccessMode }}
    {{ if .Values.MySQL.Persistence.AwsVolumeId }}
    awsElasticBlockStore:
      volumeID: {{ .Values.MySQL.Persistence.AwsVolumeId }}
    {{ else }}
    hostPath:
      path: {{ .Values.MySQL.Persistence.Path }}
    {{ end }}
    capacity:
      storage: "{{ .Values.MySQL.Persistence.Size }}"
    persistentVolumeReclaimPolicy: Retain

# Persistent Volume Claim
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "{{ .Values.packageId }}-{{ .Values.MySQL.Persistence.Name }}"
  spec:
    accessModes:
    - "{{ .Values.MySQL.Persistence.AccessMode }}"
    resources:
      requests:
        storage: "{{ .Values.MySQL.Persistence.Size }}"
    volumeName:  "{{ .Values.packageId }}-{{ .Values.MySQL.Persistence.Name }}"

# Deployment
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: null
    generation: 1
    labels:
      component: "{{.Values.packageId}}-{{.Values.MySQL.Name}}"
    name: "{{.Values.packageId}}-{{.Values.MySQL.Name}}"
  spec:
    replicas: 1
    selector:
      matchLabels:
        component: "{{.Values.packageId}}-{{.Values.MySQL.Name}}"
    template:
      metadata:
        labels:
          component: "{{.Values.packageId}}-{{.Values.MySQL.Name}}"
          networkpolicy_datasource: "{{.Values.packageId}}-{{.Values.MySQL.Name}}"
      spec:
        containers:
        - image: "{{.Values.MySQL.Image}}:{{.Values.MySQL.ImageTag}}"
          imagePullPolicy: IfNotPresent
          name: "{{.Values.packageId}}-{{.Values.MySQL.Name}}"
          args: ["--ignore-db-dir","lost+found"]
          env:
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.packageId }}-{{ .Values.MySQL.Name  }}"
                  key: name
            {{ if ne .Values.MySQL.Secret.user "root" }}
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.packageId }}-{{ .Values.MySQL.Name  }}"
                  key: user
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.packageId }}-{{ .Values.MySQL.Name  }}"
                  key: password
            {{ end }}
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.packageId }}-{{ .Values.MySQL.Name  }}"
                  key: password
          ports:
          - containerPort: {{ .Values.MySQL.Port }}
            protocol: TCP
          resources:
            requests:
              cpu:  "{{.Values.MySQL.Cpu}}"
              memory:  "{{.Values.MySQL.Memory}}"
          securityContext:
            privileged: true
          volumeMounts:
          - mountPath: /var/lib/mysql
            name:  "{{ .Values.packageId }}-{{ .Values.MySQL.Persistence.Name }}"
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        volumes:
        - name: "{{ .Values.packageId }}-{{ .Values.MySQL.Persistence.Name }}"
          persistentVolumeClaim:
            claimName: "{{ .Values.packageId }}-{{ .Values.MySQL.Persistence.Name }}"
{{ end }}
