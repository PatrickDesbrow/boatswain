apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  creationTimestamp: null
  generation: 1
  labels:
    networkpolicy_datasource: neo4j-hierarchy
    component: "{{ .Values.packageId }}-{{.Values.Neo4j.Component}}"
  name: "{{ .Values.packageId }}-{{.Values.Neo4j.Component}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      component: "{{ .Values.packageId }}-{{.Values.Neo4j.Component}}"
  template:
    metadata:
      labels:
        networkpolicy_datasource: neo4j-hierarchy
        component: "{{ .Values.packageId }}-{{.Values.Neo4j.Component}}"
    spec:
      containers:
      - image: "{{.Values.Neo4j.Image}}:{{.Values.Neo4j.ImageTag}}"
        imagePullPolicy: IfNotPresent
        name: "{{ .Values.packageId }}-{{.Values.Neo4j.Component}}"
        env:
  {{ if .Values.Neo4j.NoAuthentication }}
          - name: NEO4J_AUTH
            value: none
  {{ end }}
        ports:
        - containerPort: {{ .Values.Neo4j.Port }}
          protocol: TCP
        resources:
          requests:
            cpu:  "{{.Values.Neo4j.Cpu}}"
            memory:  "{{.Values.Neo4j.Memory}}"
        volumeMounts:
        - mountPath: /data
          name:  "{{ .Values.packageId }}-{{ .Values.Neo4j.Persistence.Name }}"
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      securityContext: {}
      volumes:
      - name: "{{ .Values.packageId }}-{{.Values.Neo4j.Persistence.Name}}"
        persistentVolumeClaim:
          claimName: "{{ .Values.packageId }}-{{.Values.Neo4j.Persistence.Name}}"
