apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    component: "{{ .Values.packageId }}-{{ .Values.Hierarchy.Name }}"
  name: "{{ .Values.packageId }}-{{ .Values.Hierarchy.Name }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      component: "{{ .Values.packageId }}-{{ .Values.Hierarchy.Name }}"
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        networkpolicy_datauser_neo4j: neo4j-hierarchy
        networkpolicy_datasource: hierarchy
        networkpolicy_ingress: expose
        component: "{{ .Values.packageId }}-{{ .Values.Hierarchy.Name }}"
    spec:
      containers:
      - image: "{{ .Values.Hierarchy.Nginx.Image }}:{{ .Values.Hierarchy.Nginx.ImageTag }}"
        imagePullPolicy: Always
        name: "{{ .Values.Hierarchy.Nginx.Name }}"
        ports:
        - containerPort: 80
          protocol: TCP
        env:
          - name: HIERARCHY_HOST
            value: localhost
          - name: HIERARCHY_PORT
            value: "{{ .Values.Hierarchy.Php.Port }}"
        resources:
          requests:
            cpu: "{{ .Values.Hierarchy.Nginx.Cpu }}"
        volumeMounts:
        - name: hierarchy-nginx-config
          mountPath: /etc/nginx/conf.d
      - image: "{{ .Values.Hierarchy.Php.Image }}:{{ .Values.Hierarchy.Php.ImageTag }}"
        imagePullPolicy: Always
        name: "{{ .Values.Hierarchy.Php.Name }}"
        env:
          - name: NEO4J_HOST
            value: "{{ .Values.packageId }}-{{.Values.Neo4j.Component}}"
          - name: NEO4J_PORT
            value: "{{.Values.Neo4j.Port}}"
        livenessProbe:
          httpGet:
            path: /test
            port: 80
          initialDelaySeconds: 15
          timeoutSeconds: 1
        ports:
        - containerPort: {{ .Values.Hierarchy.Php.Port }}
          protocol: TCP
        resources:
          requests:
            cpu: "{{ .Values.Hierarchy.Php.Cpu }}"
        terminationMessagePath: /dev/termination-log
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: hierarchy-nginx-config
          configMap:
            name: "{{ .Release.Name }}-{{ .Values.Hierarchy.Nginx.Name }}"
status: {}
