package lib

import (
	"bytes"
	"fmt"
	"html/template"
	"io/ioutil"
	"os"
	"strings"

	"github.com/medbridge/boatswain/utilities"
	"github.com/spf13/viper"
)

type Values struct {
	ImageTag             string
	ServiceMap           []string `yaml:"ServiceMap"`
	Env                  map[string]string
	CloudFormationValues map[string]string `yaml:"CloudFormationValues"`
	PackageID            string
	Deployment           string
}

//NewValues Value factory
func NewValues(packageId string, deploy string, imageTag string, env map[string]string) *Values {
	v := Values{
		PackageID:  packageId,
		Deployment: deploy,
		ImageTag:   imageTag,
		Env:        env,
	}
	return &v
}

//Write runs the Value object through the YAML template and writes the output to a autogenerated/values.staging.<packageId>.yaml file
func (v *Values) Write() string {
	basePath := viper.GetString("release")
	fileMode := os.FileMode(0777)
	fileName := "values.staging." + v.PackageID + ".yaml"
	autogenPath := basePath + "/" + v.Deployment + "/autogenerated/"
	if !pathExists(autogenPath) {
		os.Mkdir(autogenPath, fileMode)
	}
	valuesPath := autogenPath + fileName
	utilities.PrintWrapper("boatswain", "Creating : "+fileName)
	utilities.PrintWrapper("boatswain", "Created values file: "+valuesPath)

	err := ioutil.WriteFile(valuesPath, []byte(v.GetStagingYaml()), fileMode)
	if err != nil {
		panic(err)
	}
	return valuesPath
}

func (v *Values) GetStagingYaml() string {
	funcs := template.FuncMap{
		"ToEnv": func(s string) string {
			s = strings.Replace(s, "-", "_", -1)
			return strings.ToUpper(s) + "_HOST"
		},
	}
	tmpl, err := template.New("values").Funcs(funcs).Parse(`

##################################################################
##                                                              ##
##  Autogenerated file. Changes made here will be overwritten.  ##
##                                                              ##
##################################################################

Boatswain:
  Active: true
  ImageTag: "{{.ImageTag}}"
  ServiceEnv:
    {{- range $key, $value := .Env }}
    {{ $key | ToEnv }}: {{ $value }}
	{{- end }}
  CloudFormationValues:
    {{- range $key, $value := .CloudFormationValues }}
    {{ $key }}: {{ $value }}
    {{- end }}

`)
	var doc bytes.Buffer
	err = tmpl.Execute(&doc, v)
	s := doc.String()
	fmt.Printf("%s", s)
	if err != nil {
		panic(err)
	}
	return s
}

func pathExists(dirPath string) bool {
	_, err := os.Stat(dirPath)
	return !os.IsNotExist(err)

}
